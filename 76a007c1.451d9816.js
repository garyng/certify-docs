(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{116:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return d}));var n=r(0),a=r.n(n);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=a.a.createContext({}),p=function(e){var t=a.a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},u=function(e){var t=p(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),u=p(r),b=n,d=u["".concat(s,".").concat(b)]||u[b]||m[b]||i;return r?a.a.createElement(d,c(c({ref:t},l),{},{components:r})):a.a.createElement(d,c({ref:t},l))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,s=new Array(i);s[0]=b;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:n,s[1]=c;for(var l=2;l<i;l++)s[l]=r[l];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"},87:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return s})),r.d(t,"metadata",(function(){return c})),r.d(t,"toc",(function(){return o})),r.d(t,"default",(function(){return p}));var n=r(3),a=r(7),i=(r(0),r(116)),s={id:"script-hooks",title:"Scripting"},c={unversionedId:"script-hooks",id:"script-hooks",isDocsHomePage:!1,title:"Scripting",description:"About Scripting",source:"@site/docs/script-hooks.md",slug:"/script-hooks",permalink:"/docs/script-hooks",editUrl:"https://github.com/webprofusion/certify-docs/edit/master/docs/script-hooks.md",version:"current",sidebar:"docs",previous:{title:"Deployment Tasks",permalink:"/docs/deployment/tasks_intro"},next:{title:"Using Certificates in Windows",permalink:"/docs/ssl-windows"}},o=[{value:"Scripting Basics",id:"scripting-basics",children:[]},{value:"Pre-Request Tasks",id:"pre-request-tasks",children:[]},{value:"Deployment Tasks (Post-Request)",id:"deployment-tasks-post-request",children:[{value:"Example: Output the result properties to a text file",id:"example-output-the-result-properties-to-a-text-file",children:[]},{value:"Example: Send email via Gmail after unsuccessful renewal",id:"example-send-email-via-gmail-after-unsuccessful-renewal",children:[]},{value:"Example: Restart RRAS after successful certificate renewal",id:"example-restart-rras-after-successful-certificate-renewal",children:[]},{value:"Example: Convert CNG certificate storage to CSP (for Exchange 2013)",id:"example-convert-cng-certificate-storage-to-csp-for-exchange-2013",children:[]},{value:"Example: Enable certificate for Exchange 2013 / 2016 services on local server",id:"example-enable-certificate-for-exchange-2013--2016-services-on-local-server",children:[]},{value:"Example: Update VMWare Horizon certificate",id:"example-update-vmware-horizon-certificate",children:[]},{value:"Example: Update SQL Server Reporting Services",id:"example-update-sql-server-reporting-services",children:[]}]},{value:"Troubleshooting",id:"troubleshooting",children:[]}],l={toc:o};function p(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},l,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"about-scripting"},"About Scripting"),Object(i.b)("p",null,"Certify is extensible via PowerShell scripts tasks which can be configured to run before or after the Certificate Request. From v5 onwards these are found under the Tasks tab for your managed certificate. See ",Object(i.b)("a",{parentName:"p",href:"deployment/tasks_intro"},"Tasks")," for more information."),Object(i.b)("p",null,"The scripts are provided a parameter ",Object(i.b)("inlineCode",{parentName:"p"},"$result")," which contains the status and details of the managed certificate being requested. You can execute any commands including creating new processes, or using other command line tools. "),Object(i.b)("p",null,"A common use for scripting is to use your new certificate for services other than IIS websites, such as Microsoft Exchange, RDP Gateway, FTP servers and other services. The app also has a range of built-in deployment tasks which also use scripting internally."),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"By default the background service runs as Local System, so your scripts will execute in that context"),", this can be important for issues regarding permissions, file system encryption etc. You can optionally configure your task to run as a specific user if network access or special permissions are required."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Do not store scripts under the C:\\Program Files\\CertifyTheWeb","*"," folder. File stored there will be deleted next time you update the app")),Object(i.b)("p",null,"All scripts should be refined and tested in a staging environment before use in production."),Object(i.b)("h2",{id:"scripting-basics"},"Scripting Basics"),Object(i.b)("p",null,"Here is a sample PowerShell script which demonstrates a few commonly accessed pieces of information:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-PowerShell"},'param($result)   # required to access the $result parameter\n\n# either $true or $false\n$result.IsSuccess\n\n# object containing all information Certify has about the saved Site\n$result.ManagedItem\n\n# the IIS (or other service) site ID\n$result.ManagedItem.ServerSiteId   # ex: 1, 2, 3, ...\n\n# the website root directory (if applicable)\n$result.ManagedItem.RequestConfig.WebsiteRootPath   # ex: "C:\\inetpub\\wwwroot"\n\n# the path to the created/renewed certificate PFX file\n$result.ManagedItem.CertificatePath   # ex: "C:\\ProgramData\\Certify\\certes\\assets\\pfx\\00f9e07e-83ca-4029-a173-4b704ee78996.pfx"\n\n# the certificate thumbprint\n$result.ManagedItem.CertificateThumbprintHash # ex: "78b1080a1bf5e7fc0bbb0c0614fc4a18932db5f9"\n\n# the previous certificate thumbprint\n$result.ManagedItem.CertificatePreviousThumbprintHash  # ex: "18c1060a1be5e6fc0bbb0c0614fc4a18932db5fa"\n\n# You can set $result.Abort to $true in a pre-request hook to prevent the certificate from\n# being requested (has no effect in post-request hooks)\n$result.Abort = $false\n')),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"$result.ManagedItem")," object is an instance of the ",Object(i.b)("a",{href:"https://github.com/webprofusion/certify/blob/development/src/Certify.Models/Config/ManagedCertificate.cs",target:"_blank"},"ManagedCertificate")," class, so all of the properties it has will be available in your script:"),Object(i.b)("h2",{id:"pre-request-tasks"},"Pre-Request Tasks"),Object(i.b)("p",null,"Notes: Pre-request scripts/tasks are executed immediately before the Certificate Request is about to be made (including the challenge file configuration checks)."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("inlineCode",{parentName:"li"},"$result.IsSuccess")," value will always be ",Object(i.b)("inlineCode",{parentName:"li"},"$false"),"."),Object(i.b)("li",{parentName:"ul"},"If for some reason your script would like to prevent the Certificate Request from being executed, you may set ",Object(i.b)("inlineCode",{parentName:"li"},"$result.Abort")," to ",Object(i.b)("inlineCode",{parentName:"li"},"$true")," and the site your script was executed for will be skipped.")),Object(i.b)("h2",{id:"deployment-tasks-post-request"},"Deployment Tasks (Post-Request)"),Object(i.b)("p",null,"Deployment task (post-request) scripts are executed immediately after the Certificate Request was completed, and the certificate was automatically installed and configured according to the site configuration within Certify."),Object(i.b)("p",null,"By default these run if the request was successful but you can change the task trigger (On Success, On Fail, etc). You can also configure them for manual execution only, so that you can perform them during a maintenance window, or via a windows scheduled task using the command line."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("inlineCode",{parentName:"li"},"$result.IsSuccess")," value indicates whether or not the Certificate Request was successfully completed."),Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("inlineCode",{parentName:"li"},"$result.Message")," value provides a message describing the reason for failure, or a message indicating success.")),Object(i.b)("p",null,"Legacy uses for scripting (v4.x and lower) may have previously included CCS Export, PEM file creation etc however these functions are provided by built-in Deployment Tasks which you should use instead unless the built-in functionality does not meet your requirements."),Object(i.b)("h3",{id:"example-output-the-result-properties-to-a-text-file"},"Example: Output the result properties to a text file"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-PowerShell"},'# Logs results to the given path (modify as required)\n\nparam($result)  \n$logpath = "c:\\temp\\ps-test.txt"\n\n$date = Get-Date\n\nAdd-Content $logpath ("-------------------------------------------------");\nAdd-Content $logpath ("Script Run Date: " + $date)\nAdd-Content $logpath ($result | ConvertTo-Json)\n')),Object(i.b)("h3",{id:"example-send-email-via-gmail-after-unsuccessful-renewal"},"Example: Send email via Gmail after unsuccessful renewal"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Note: this is an example only, by default the app will use the certifytheweb.com API to notify you of repeated failures.")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-PowerShell"},'param($result)\nif (!$result.IsSuccess) {\n   $EmailFrom = "username@gmail.com"\n   $EmailTo = "username@gmail.com"\n   $Subject = "Cert Request Failed: " + $result.ManagedItem.RequestConfig.PrimaryDomain\n   $Body = "Error: " + $result.Message\n   $SMTPServer = "smtp.gmail.com"\n   $SMTPClient = New-Object Net.Mail.SmtpClient($SmtpServer, 587)\n   $SMTPClient.EnableSsl = $true\n   $SMTPClient.Credentials = New-Object System.Net.NetworkCredential("username@gmail.com", "password");\n   $SMTPClient.Send($EmailFrom, $EmailTo, $Subject, $Body)\n   write-output "Sent notification email"\n}\n')),Object(i.b)("h3",{id:"example-restart-rras-after-successful-certificate-renewal"},"Example: Restart RRAS after successful certificate renewal"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-PowerShell"},'param($result)\nif ($result.IsSuccess -and $result.ManagedItem.GroupId -eq 1) {\n   write-output "Restarting RRAS..."\n   Net Stop RemoteAccess\n   Net Start RemoteAccess\n   write-output "Done"\n}\n')),Object(i.b)("h3",{id:"example-convert-cng-certificate-storage-to-csp-for-exchange-2013"},"Example: Convert CNG certificate storage to CSP (for Exchange 2013)"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-PowerShell"},'param($result)\n$tempfile = "$env:TEMP\\CertifyTemp.pfx"\n$pfx = get-pfxcertificate -filepath $result.ManagedItem.CertificatePath\ncertutil -f -p Certify -exportpfx $pfx.SerialNumber $tempfile\ncertutil -delstore my $pfx.SerialNumber\ncertutil -p Certify -csp "Microsoft RSA SChannel Cryptographic Provider" -importpfx $tempfile\nremove-item $tempfile\n')),Object(i.b)("h3",{id:"example-enable-certificate-for-exchange-2013--2016-services-on-local-server"},"Example: Enable certificate for Exchange 2013 / 2016 services on local server"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-PowerShell"},"param($result)\nEnable-ExchangeCertificate -Thumbprint $result.ManagedItem.CertificateThumbprintHash -Services POP,IMAP,SMTP,IIS -Force\n")),Object(i.b)("h3",{id:"example-update-vmware-horizon-certificate"},"Example: Update VMWare Horizon certificate"),Object(i.b)("p",null,"This example removes any previous certificate with the same FriendlyName (",Object(i.b)("inlineCode",{parentName:"p"},"vdm"),") then renames the Friendly Name property of the new certificate to ",Object(i.b)("inlineCode",{parentName:"p"},"vmd"),". It then restarts the ",Object(i.b)("inlineCode",{parentName:"p"},"wstunnel")," service."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-PowerShell"},'param($result)\n\nif ($result.IsSuccess) {\n\n   $thumbprint = $result.ManagedItem.CertificateThumbprintHash # e.g. 2c127d49b4f63d947dd7b91750c9e57751eced0c\n\n   # remove the old cert (by Friendly Name \'vdm\') to avoid duplication, if it exists\n   Get-ChildItem -Path cert:\\LocalMachine\\My | Where {$_.FriendlyName.Equals("vdm")} | Remove-Item\n\n   # rename our new certificate\n   $cert = Get-ChildItem -Path cert:\\LocalMachine\\My\\$thumbprint\n\n   $cert.FriendlyName ="vdm"\n\n   # restart the wstunnel service to apply certificate\n   Restart-Service wstunnel -Force -ErrorAction Stop\n}\n\n')),Object(i.b)("h4",{id:"example-update-certificate-for-sstp-vpn"},"Example: Update certificate for SSTP VPN"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-PowerShell"},"\n\nparam($result)\n\n# Store certificate in variable\n$cert = Get-ChildItem -Path Cert:\\LocalMachine\\My | Where-Object {$_.Thumbprint -match $result.ManagedItem.CertificateThumbprintHash}\n\n# Stop RRAS, set cert, start RRAS\nImport-Module RemoteAccess\nStop-Service RemoteAccess\nSet-RemoteAccess -SslCertificate $cert\nStart-Service RemoteAccess\n")),Object(i.b)("h3",{id:"example-update-sql-server-reporting-services"},"Example: Update SQL Server Reporting Services"),Object(i.b)("p",null,"This is adapted from a community example: ",Object(i.b)("a",{parentName:"p",href:"https://community.certifytheweb.com/t/sql-server-reporting-services-ssrs/332/7"},"https://community.certifytheweb.com/t/sql-server-reporting-services-ssrs/332/7"),"  "),Object(i.b)("p",null,"This script gets the report server config object the checks if an existing cert is bound it removes that, then creates the new binding."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'param($result)\n\n$ssrsServerName = "RS_MSSQLSERVER"\n$ssrsReportManagerName = "ReportManager"\n$ssrsReportWebServiceName = "ReportServerWebService"\n\n$httpsPort = 443\n$ipAddress = "0.0.0.0"\n\n# Find the ssrsServerName by running:\n# Get-WmiObject -namespace root\\Microsoft\\SqlServer\\ReportServer -class __Namespace\n# take the value of the name field\n\n$version = (Get-WmiObject \u2013namespace root\\Microsoft\\SqlServer\\ReportServer\\$ssrsServerName  \u2013class __Namespace).Name\n$rsConfig = Get-WmiObject \u2013namespace "root\\Microsoft\\SqlServer\\ReportServer\\$ssrsServerName\\$version\\Admin" -class MSReportServer_ConfigurationSetting\n\n# the cert thumbnail of the newest certificate\n$newthumb = $result.ManagedItem.CertificateThumbprintHash.ToLower()\n\n# check the cert thumbnail of the currently bound certificate (if any)\n\n$oldthumb = \'\'\n\ntry {\n   $oldthumb = $rsConfig.ListSSLCertificateBindings(1033).CertificateHash.Item([array]::LastIndexOf($rsConfig.ListSSLCertificateBindings(1033).Application, $ssrsReportManagerName))\n\n   if ($oldthumb -ne $newthumb) {      \n      $rsConfig.RemoveSSLCertificateBindings($ssrsReportManagerName, $oldthumb, $ipAddress, $httpsport, 1033) \n      $rsConfig.RemoveSSLCertificateBindings($ssrsReportWebServiceName, $oldthumb, $ipAddress, $httpsport, 1033)\n   }\n} catch {}\n\n$rsConfig.CreateSSLCertificateBinding($ssrsReportManagerName, $newthumb, $ipAddress, $httpsport, 1033)\n$rsConfig.CreateSSLCertificateBinding($ssrsReportWebServiceName, $newthumb, $ipAddress, $httpsport, 1033) \n')),Object(i.b)("h2",{id:"troubleshooting"},"Troubleshooting"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"In the Certify UI, you may test scripts by clicking the \u25b6 button. You should ideally test scripts after you have completed a successful certificate request so that you have real results and a certificate to work with.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"The ",Object(i.b)("inlineCode",{parentName:"p"},"$result.ManagedItem.CertificatePath")," value will be set to the filename (including path) of the PFX file containing the requested certificate, unless the site is new and has not had a successful Certificate Request, in which case the value will not be set.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},'PowerShell Execution Policies may be set by your administrator which affect script execution. The app will try to set the policy to "Unrestricted" by default which may conflict with higher level policy settings. You can set the default script execution policy in the server settings file (then restart the Certify background service) ',Object(i.b)("inlineCode",{parentName:"p"},"%PROGRAMDATA%\\Certify\\serviceconfig.json")),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"PowershellExecutionPolicy":"Unrestricted"')," or"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"PowershellExecutionPolicy":"Bypass"')," or"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'"PowershellExecutionPolicy":""')," (blank string) to use the default policy set by your administrator.")))))}p.isMDXComponent=!0}}]);